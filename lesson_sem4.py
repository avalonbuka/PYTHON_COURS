# Напишите программу, которая принимает на вход строку, и отслеживает,
# сколько раз каждый символ уже встречался.
# Количество повторов добавляется к символам с помощью постфикса формата _n.
#
# Input: a a a b c a a d c d d
# Output: a a_1 a_2 b c a_3 a_4 d c_1 d_1 d_2
#
# Для решения данной задачи используйте функцию .split()


# text = "a a a b c a a d c d d"
# my_list = text.split()
# dict = {}
# print(my_list)

# for i in my_list:
#     if i not in dict.keys():
#         dict[i] = 0
#         print(f"{i}", end=" ")
#     else:
#         dict[i] += 1
#         print(f"{i}_{dict[i]}", end=" ")

# Решения от преподавателя.
#25Напишите программу, которая принимает на вход строку,

# lst_1 = input().split()
# result = {}
# for i in lst_1:
#     if i in result:
#         result[i] += 1
#         print(f"{i}_{result[i]}",end = " ")
#     else:
#         result[i] = 0
#         print(i,end = " ")

# N = "a a a b c a a d c d d".split()
# for i in range(len(N)):
#     count = 0
#     for j in range(i + 1,len(N)):
#         if N[i] == N[j]:
#             count +=1
#             N[j] += '_' + str(count)
# print(" ".join(N))

# Пользователь вводит текст(строка). Словом считается последовательность
# непробельных символов идущих подряд, слова разделены одним пробелом.
# Определите, сколько различных слов содержится в этом тексте.
# Input: She sells sea shells on the sea shore The shells that she sells are sea shells
# I'm sure So if she sells sea shells on the sea shore I'm sure that the shells are sea shore shells
#
# Output: 13

# text = str(input())
# list_t = text.split()
# print(len(list_t))


# Ваня и Петя поспорили, кто быстрее решит следующую задачу: “Задана последовательность неотрицательных целых чисел.
# Требуется определить значение наибольшего элемента последовательности, которая завершается первым встретившимся нулем
# (число 0 не входит в последовательность)”. Однако 2  друга оказались не такими смышлеными. Никто из ребят не смог до конца сделать это задание.
# Они решили так: у кого будет меньше ошибок в коде, тот и выиграл спор. За помощью товарищи обратились к Вам, студентам.

# n = int(input())
# max_number = 1000 ошибка
# while n != 0:
#    n = int(input())
#    if max_number > n:
#        max_number = n
# print(max_number)


# n = int(input())
# max_number = -1
# while n < 0:
#    n = int(input())
#    if max_number < n:
#        n = max_number
# print(n)

# num = int(input())
# max = num
# while num != 0:
#     if num > max and num != 0:
#         max = num
#     num = int(input())
# print(f'{max = }')


# 20:52
# Задача №112288. Симметричные пары
# Пара элементов в массиве называется симметричной , если эти элементы находятся на одинаковом расстоянии от концов массива.
# Так в массиве размером N симметричными будут пары элементов с порядковыми номерами 1 и N , 2 и N - 1 и т.д. (при нумерации с единицы).
# Напишите программу, которая заполняет массив из N элементов случайными целыми числами в диапазоне [ A , B ] и определяет номера двух симметричных элементов этого массива,
# сумма которых чётная и максимальная среди всех пар симметричных элементов. Если ни одной такой пары нет, нужно вывести два нуля.
# Если есть несколько таких пар, нужно вывести номера элементов, составляющих пару, ближайшую к центру массива.

# Входные данные
# Входная строка содержит три числа: границы диапазона случайных чисел A и B , а также размер массива N .
# Все числа разделены пробелами. Гарантируется, что 0 < N ≤ 10000 .

# Выходные данные
# В первой строке программа должна вывести N элементов построенного массива, разделив их пробелами,
# а во второй строке – номера двух симметричных элементов массива, имеющих максимальную чётную сумму. Если ни одной такой пары нет, нужно вывести два нуля.

# Примеры
# входные данные
# 10 20 10
# выходные данные
# 10 10 19 12 13 17 13 11 14 14
# 5 6




# Задача №112515. Построчный редактор
# Напишите программу, которая управляет текстовым редактором по командам, записанным в файл output.txt .
# Строки текста нумеруются с единицы. Сначала список строк пустой. Существует три команды: '+' – добавление строки, '-' – удаление строки и '*' – замена строки.
# Попытка удалить или заменить строку, которой нет в списке, считается ошибкой. Ошибочна также и вставка строки с номером,
# который более чем на единицу превышает количество строк в тексте.

# Входные данные
# В файле input.txt записаны строки с командами, последняя строка файла – пустая. Первый символ любой рабочей строки – это команда ('+', '-' или '*'),
# далее без пробела записывается номер строки, а затем (для команд '+' и '*') – текст новой строки, который нужно добавить или заменить.

# Выходные данные
# Программа должна вывести в файл output.txt все строки, которые остались в списке после обработки всех команд.
# Если в списке не осталось ни одной строки, нужно вывести слово 'EMPTY'. Если произошла ошибка, нужно вывести слово 'ERROR'.

# Примеры
# входные данные
# +1 I am a pupil. 
# +2 He is a pupil.
# +2 She is a pupil.
# +3 This is a pupil.
# *2 Bob went home.
# -3
# выходные данные
# I am a pupil.
# Bob went home.
# He is a pupil.

# N = []
# command = input()

# while command != 'done':
#     command = input()
#     if command[0] == "+":
#         N.append(command[1])
#     if command[0] == '-':
#         N.pop(command[1])
#     if command[0] == '*':
#         N[command[1]] = command

# ДЗ
# зад18
# n = int(input())
# lst = [int(input()) for i in range(n)]
# x = int(input())
# min_range = abs(x-lst[0])
# el = lst[0]
# for i in lst:
#     if abs(x-i)<min_range:
#         min_range = abs(x-i)
#         el = i
# print(el)

# 20
# points_en = {1: 'AEIOULNSTR', 2: 'DG', 3: 'BCMP', 4: 'FHVWY', 5: 'K', 8: 'JZ', 10: 'QZ'}
# points_ru = {1: 'АВЕИНОРСТ', 2: 'ДКЛМПУ', 3: 'БГЁЬЯ', 4: 'ЙЫ', 5: 'ЖЗХЦЧ', 8: 'ШЭЮ', 10: 'ФЩЪ'}
# word = input().upper()
# count = 0
# if word[0] in "QWERTYUIOPASDFGHJKLZXCVBNM":
#     for sym in word:
#         for key in points_en:
#             if sym in points_en[key]:
#                 count += key
# else:
#     for sym in word:
#         for key in points_ru:
#             if sym in points_ru[key]:
#                 count += key
# print(count)